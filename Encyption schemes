#they produce the same result the methods and structures are what's different when it comes to Enryption as long as there suffcient obfuscation that generally consider a success

first method with import
import string

Library = string.ascii_uppercase + string.digits + "_"

List = [165,248,94,346,299,73,198,221,313,137,205,87,336,110,186,69,223,213,216,216,177,138]

encrypted_list = []

for item in List:
  encrypted_list.append(Library[item % 37])

print("Encrypted list:", "".join(encrypted_list))


second method without import(easiest method)
LIBRARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"

LIST = [165,248,94]

for item in LIST:
  remainder = item % 37

  if 0 <= remainder <= 25:
    print("Alphabet")
  elif 26 <= remainder <= 35:
    print("Digits")
  else:
    print("Underscore")

third method without import
LIBRARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"

msg = "hello there these codes were done by mansour and ahmed".split()

encrypted_message = ""

for i in range(len(msg)):
  encrypted_message += LIBRARY[int(msg[i]) % 37]

print("picoCTF{", end='')
print(encrypted_message, end='')


fourth method without import but the modular has an inverse value meaning it starts from 1 and is to the power of -1
LIBRARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"

msg = "104 372 110 436 262 173 354 393 351 297 241 86 262 359 256 441 124 154 165 165 219 288 42".split()

encrypted_message = ""

for i in range(len(msg)):
  encrypted_message += LIBRARY[pow(int(msg[i]), -1, 37)]

print("picoCTF{", end='')
print(encrypted_message, end='')

#if look carfully you will see that both encryption and decryption schemes have almost identical structure which is good that is indicative of a two way code able to encrypt and decrypt text
